library rejuventationAbility, optional CothUtilities {
  trigger onRejuventationCastStart = CreateTrigger();
  trigger onRejuventationCastFinish = CreateTrigger();
  hashtable rejuventationData = InitHashtable();

  static if (LIBRARY_CothUtilities) {
    function addLifePercent(unit whichUnit, integer percent)  -> nothing {
      if (IsUnitDeadBJ(whichUnit)) return;

      SetUnitState(whichUnit, UNIT_STATE_LIFE, GetUnitState(whichUnit, UNIT_STATE_LIFE) + GetUnitState(whichUnit, UNIT_STATE_MAX_LIFE) * ( percent / 100 ));
    }
  }

  struct rejuventation extends array {
    effect yellowBall;
    effect greenBall;
    timer timerHeal;
    trigger onCasterDamaged;
    triggeraction onCasterDamagedAction;
    unit caster;
    static method create()  -> thistype {
      thistype this = allocate();
      this.caster = GetTriggerUnit();
      this.clearData();
      this.createYellowBall();
      //Stop cast if caster was damaged
      this.onCasterDamaged = CreateTrigger();
      this.onCasterDamagedAction = TriggerAddAction(this.onCasterDamaged, (){
        thistype spell = LoadInteger(rejuventationData, GetHandleId(GetTriggeringTrigger()), 0);
        DestroyEffect(spell.yellowBall);
        FlushChildHashtable(rejuventationData, GetHandleId(GetTriggeringTrigger()));
        TriggerRemoveAction(spell.onCasterDamaged, spell.onCasterDamagedAction);
        DestroyTrigger(spell.onCasterDamaged);
        spell.yellowBall = null;
        spell.onCasterDamaged = null;
        spell.onCasterDamagedAction = null;
      });
      SaveInteger(rejuventationData, GetHandleId(this.onCasterDamaged), 0, this);
    }

    method createYellowBall() {
      this.yellowBall = AddSpecialEffectTarget("RejuvTarget.mdx", this.caster, "overhead");
    }

    method createGreenBall() {
      this.greenBall = AddSpecialEffectTarget("Abilities\\Spells\\NightElf\\Tranquility\\TranquilityTarget.mdl", this.caster, "overhead");
    }

    method clearData() {
      DestroyEffect(this.yellowBall);
      DestroyEffect(this.greenBall);
      FlushChildHashtable(rejuventationData, GetHandleId(timerHeal));
      DestroyTimer(this.timerHeal);
      TriggerRemoveAction(this.onCasterDamaged, this.onCasterDamagedAction);
      FlushChildHashtable(rejuventationData, GetHandleId(this.onCasterDamaged));
      DestroyTrigger(this.onCasterDamaged);

      this.yellowBall = null;
      this.greenBall = null;
      this.timeHeal = null;
      this.onCasterDamaged = null;
      this.onCasterDamagedAction = null;
    }

  }

  function isSpellIdRejuventation() -> boolean {
    return GetSpellAbilityId() == 'AEsf';
  }

  function findRejuventationSpellByCaster(unit caster)  -> integer {
    integer index;
    for (0 <= index <= 8190) {
      if (rejuventation[index].caster == caster) return index;
    }
    return -1;
  }

  function onInit()  -> nothing {
    TriggerRegisterAnyUnitEventBJ(onRejuventationCastStart, EVENT_PLAYER_UNIT_SPELL_EFFECT);
    TriggerAddCondition(onRejuventationCastStart, Filter(function isSpellIdRejuventation));
    TriggerAddAction(onRejuventationCastStart, (){
      rejuventation spell = rejuventation.create();
    });

    TriggerRegisterAnyUnitEventBJ(onRejuventationCastFinish, EVENT_PLAYER_UNIT_SPELL_FINISH);
    TriggerAddCondition(onRejuventationCastFinish, Filter(function isSpellIdRejuventation));
    TriggerAddAction(onRejuventationCastFinish, (){
      rejuventation spell = findRejuventationSpellByCaster(GetTriggerUnit());
      if (spell == -1) {
        DisplayTimedTextToPlayer(GetLocalPlayer(), 0, 0, 20, "ERROR: rejuvenation spell data is not registered!");
        return;
      }

     });

    

  }

}